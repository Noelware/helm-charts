{{/*
~ üêª‚Äç‚ùÑÔ∏èüîÆ Noelware's Helm Charts: Curated catalog of Noelware's Helm charts.
~ Copyright (c) 2022-2024 Noelware, LLC. <team@noelware.org>
~
~ Permission is hereby granted, free of charge, to any person obtaining a copy
~ of this software and associated documentation files (the "Software"), to deal
~ in the Software without restriction, including without limitation the rights
~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
~ copies of the Software, and to permit persons to whom the Software is
~ furnished to do so, subject to the following conditions:
~
~ The above copyright notice and this permission notice shall be included in all
~ copies or substantial portions of the Software.
~
~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
~ SOFTWARE.
*/}}

{{- if .Values.service.enabled }}
apiVersion: v1
kind: Service
metadata:
    name: {{ include "symbolicator.fullname" . }}
    namespace: {{ .Release.Namespace }}
    annotations:
        {{- include "symbolicator.annotations" (dict "context" .) | nindent 8 }}
    labels:
        {{- include "symbolicator.labels" . | nindent 8 }}
spec:
    type: {{ .Values.service.type }}
    ports:
        - protocol: TCP
          port: {{ .Values.service.port }}
          targetPort: http
          {{- if and (or (eq .Values.service.type "NodePort") (eq .Values.service.type "LoadBalancer")) (not (empty .Values.service.nodePort)) }}
          nodePort: {{ .Values.service.nodePort }}
          {{- else if eq .Values.service.type "ClusterIP" }}
          nodePort: null
          {{- end }}
    selector:
        {{- include "symbolicator.labels" . | nindent 8 }}
        {{- if .Values.service.selectorLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.service.selectorLabels "context" $) | nindent 8 }}
        {{- end }}

    {{- if and .Values.service.clusterIP (eq .Values.service.type "ClusterIP") }}
    clusterIP: {{ .Values.service.clusterIP }}
    {{- end }}
    {{- if and .Values.service.externalName (eq .Values.service.type "ExternalName") }}
    externalName: {{ .Values.service.externalName }}
    {{- end }}
{{- end }}
